import * as ModuleId from '../ModuleId/ModuleId.js'

export const getModuleId = (commandId) => {
  switch (commandId) {
    // TODO this should be in layout module
    case 'Ajax.getJson':
    case 'Ajax.getText':
      return ModuleId.Ajax
    case 'Audio.playBell':
      return ModuleId.Audio
    case 'Base64.decode':
    case 'Base64.encode':
      return ModuleId.Base64
    case 'Blob.base64StringToBlob':
    case 'Blob.binaryStringToBlob':
    case 'Blob.blobToBinaryString':
      return ModuleId.Blob
    case 'CacheStorage.clearCache':
    case 'CacheStorage.getJson':
    case 'CacheStorage.setJson':
      return ModuleId.CacheStorage
    case 'Callback.reject':
    case 'Callback.resolve':
      return ModuleId.Callback
    case 'ClipBoard.readNativeFiles':
    case 'ClipBoard.readText':
    case 'ClipBoard.writeNativeFiles':
    case 'ClipBoard.writeText':
      return ModuleId.ClipBoard
    case 'ColorPicker.close':
    case 'ColorPicker.open':
      return ModuleId.ColorPicker
    case 'ColorTheme.hydrate':
    case 'ColorTheme.setColorTheme':
      return ModuleId.ColorTheme
    case 'ColorThemeFromJson.createColorThemeFromJson':
      return ModuleId.ColorThemeFromJson
    case 'ContentTracing.start':
    case 'ContentTracing.stop':
      return ModuleId.ContentTracing
    case 'ContextMenu.focusFirst':
    case 'ContextMenu.focusLast':
    case 'ContextMenu.focusNext':
    case 'ContextMenu.focusPrevious':
    case 'ContextMenu.hide':
    case 'ContextMenu.select':
    case 'ContextMenu.selectCurrent':
    case 'ContextMenu.show':
      return ModuleId.ContextMenu
    case 'Developer.allocateMemoryInSharedProcess':
    case 'Developer.clearCache':
    case 'Developer.crashMainProcess':
    case 'Developer.crashSharedProcess':
    case 'Developer.createSharedProcessHeapSnapshot':
    case 'Developer.createSharedProcessProfile':
    case 'Developer.downloadViewletState':
    case 'Developer.getMemoryUsageContent':
    case 'Developer.getStartupPerformanceContent':
    case 'Developer.openCacheFolder':
    case 'Developer.openConfigFolder':
    case 'Developer.openDataFolder':
    case 'Developer.openLogsFolder':
    case 'Developer.openProcessExplorer':
    case 'Developer.reloadColorTheme':
    case 'Developer.reloadIconTheme':
    case 'Developer.showColorThemeCss':
    case 'Developer.showIconThemeCss':
    case 'Developer.showMemoryUsage':
    case 'Developer.showStartupPerformance':
    case 'Developer.startupPerformance':
    case 'Developer.toggleDeveloperTools':
      return ModuleId.Developer
    case 'Dialog.close':
    case 'Dialog.handleClick':
    case 'Dialog.openFile':
    case 'Dialog.openFolder':
    case 'Dialog.showAbout':
    case 'Dialog.showMessage':
      return ModuleId.Dialog
    case 'Download.downloadFile':
    case 'Download.downloadJson':
      return ModuleId.Download
    case 'EditorDiagnostics.hydrate':
      return ModuleId.EditorDiagnostics
    case 3900:
      return ModuleId.EditorError
    case 'EditorRename.abort':
    case 'EditorRename.finish':
    case 'EditorRename.open':
      return ModuleId.EditorRename
    case 'ElectronWindow.close':
    case 'ElectronWindow.maximize':
    case 'ElectronWindow.minimize':
    case 'ElectronWindow.toggleDevtools':
    case 'ElectronWindow.unmaximize':
      return ModuleId.ElectronWindow
    case 'ErrorHandling.handleError':
      return ModuleId.ErrorHandling
    case 'Eval.evalInRendererProcess':
      return ModuleId.Eval
    case 'ExtensionHost.loadWebExtension':
    case 'ExtensionHost.startWebExtensionHost':
      return ModuleId.ExtensionHostCode
    case 'ExtensionMeta.addExtension':
    case 'ExtensionMeta.addNodeExtension':
    case 'ExtensionMeta.addWebExtension':
      return ModuleId.ExtensionMeta
    case 'Extensions.openCachedExtensionsFolder':
    case 'Extensions.openExtensionsFolder':
      return ModuleId.Extensions
    case 'PersistentFileHandle.addHandle':
    case 'PersistentFileHandle.getHandle':
    case 'PersistentFileHandle.removeHandle':
      return ModuleId.PersistentFileHandle
    case 'FilePicker.showDirectoryPicker':
    case 'FilePicker.showFilePicker':
    case 'FilePicker.showSaveFilePicker':
      return ModuleId.FilePicker
    case 'FileSystem.getPathSeparator':
    case 'FileSystem.mkdir':
    case 'FileSystem.readDirWithFileTypes':
    case 'FileSystem.readFile':
    case 'FileSystem.remove':
    case 'FileSystem.writeFile':
      return ModuleId.FileSystem
    case 'FindWidget.create':
    case 'FindWidget.dispose':
    case 'FindWidget.setValue':
      return ModuleId.FindWidget
    case 'Format.hydrate':
      return ModuleId.Format
    case 'IconTheme.addIcons':
    case 'IconTheme.getIconThemeCss':
    case 'IconTheme.hydrate':
      return ModuleId.IconTheme
    case 'ImagePreview.hide':
    case 'ImagePreview.show':
      return ModuleId.ImagePreview
    case 'IndexedDb.addHandle':
    case 'IndexedDb.getHandle':
      return ModuleId.IndexedDb
    case 'KeyBindings.handleKeyBinding':
    case 'KeyBindings.hydrate':
      return ModuleId.KeyBindings
    case 'KeyBindingsInitial.getKeyBindings':
      return ModuleId.KeyBindingsInitial
    case 'Layout.handleResize':
    case 'Layout.handleSashPointerDown':
    case 'Layout.handleSashPointerMove':
    case 'Layout.hide':
    case 'Layout.hideActivityBar':
    case 'Layout.hidePanel':
    case 'Layout.hideSideBar':
    case 'Layout.hydrate':
    case 'Layout.showActivityBar':
    case 'Layout.showPanel':
    case 'Layout.showSideBar':
    case 'Layout.toggleActivityBar':
    case 'Layout.togglePanel':
    case 'Layout.toggleSideBar':
      return ModuleId.Layout
    case 3444:
      return ModuleId.Listener
    case 'LocalStorage.clear':
    case 'LocalStorage.getItem':
    case 'LocalStorage.getJson':
    case 'LocalStorage.getText':
    case 'LocalStorage.setJson':
    case 'LocalStorage.setText':
      return ModuleId.LocalStorage
    case 'Menu.focusFirst':
    case 'Menu.focusIndex':
    case 'Menu.focusLast':
    case 'Menu.focusNext':
    case 'Menu.focusPrevious':
    case 'Menu.handleMouseEnter':
    case 'Menu.hide':
    case 'Menu.selectIndex':
    case 'Menu.selectItem':
    case 'Menu.show':
      return ModuleId.Menu
    case 'Mime.getMediaMimeType':
    case 'Mime.getTextMime':
      return ModuleId.Mime
    case 'Navigation.focusActivityBar':
    case 'Navigation.focusMain':
    case 'Navigation.focusNextPart':
    case 'Navigation.focusPanel':
    case 'Navigation.focusPreviousPart':
    case 'Navigation.focusSideBar':
    case 'Navigation.focusStatusBar':
    case 'Navigation.focusTitleBar':
      return ModuleId.Navigatiom
    case 'Notification.create':
    case 'Notification.dispose':
    case 'Notification.handleClick':
    case 'Notification.showWithOptions':
      return ModuleId.Notification
    case 'Open.openUrl':
      return ModuleId.Open
    case 'OpenNativeFolder.openNativeFolder':
      return ModuleId.OpenNativeFolder
    case 'Preferences.hydrate':
    case 'Preferences.openKeyBindingsJson':
    case 'Preferences.openSettingsJson':
      return ModuleId.Preferences
    case 'RecentlyOpened.addToRecentlyOpened':
    case 'RecentlyOpened.clearRecentlyOpened':
    case 'RecentlyOpened.getRecentlyOpened':
    case 'RecentlyOpened.hydrate':
      return ModuleId.RecentlyOpened
    case 'SaveState.handleVisibilityChange':
    case 'SaveState.hydrate':
      return ModuleId.SaveState
    case 'ServiceWorker.hydrate':
    case 'ServiceWorker.uninstall':
      return ModuleId.ServiceWorker
    case 'SessionReplay.downloadSession':
    case 'SessionReplay.openSession':
    case 'SessionReplay.replayCurrentSession':
    case 'SessionReplay.replaySession':
      return ModuleId.SessionReplay
    case 'SessionStorage.clear':
    case 'SessionStorage.getJson':
      return ModuleId.SessionStorage
    case 'Test.execute':
      return ModuleId.Test
    case '001':
      return ModuleId.TestFramework
    case '002':
      return ModuleId.TestFrameworkComponent
    case 'TitleBarMenuBar.closeMenu':
    case 'TitleBarMenuBar.focus':
    case 'TitleBarMenuBar.focusIndex':
    case 'TitleBarMenuBar.focusNext':
    case 'TitleBarMenuBar.focusPrevious':
    case 'TitleBarMenuBar.handleKeyArrowDown':
    case 'TitleBarMenuBar.handleKeyArrowLeft':
    case 'TitleBarMenuBar.handleKeyArrowRight':
    case 'TitleBarMenuBar.handleKeyArrowUp':
    case 'TitleBarMenuBar.handleKeyEnd':
    case 'TitleBarMenuBar.handleKeyEnter':
    case 'TitleBarMenuBar.handleKeyEscape':
    case 'TitleBarMenuBar.handleKeyHome':
    case 'TitleBarMenuBar.handleKeySpace':
    case 'TitleBarMenuBar.hydrate':
    case 'TitleBarMenuBar.openMenu':
    case 'TitleBarMenuBar.toggleIndex':
      return ModuleId.TitleBarMenu
    case 'Url.createObjectUrl':
    case 'Url.revokeObjectUrl':
      return ModuleId.Url
    case 'Viewlet.getAllStates':
    case 'Viewlet.openWidget':
    case 2133:
      return ModuleId.Viewlet
    case 'QuickPick.focusFirst':
    case 'QuickPick.focusLast':
    case 'QuickPick.focusNext':
    case 'QuickPick.focusPrevious':
    case 'QuickPick.handleBlur':
    case 'QuickPick.handleInput':
    case 'QuickPick.selectCurrentIndex':
    case 'QuickPick.selectIndex':
      return ModuleId.ViewletQuickPick
    case 'Window.close':
    case 'Window.exit':
    case 'Window.makeScreenshot':
    case 'Window.maximize':
    case 'Window.minimize':
    case 'Window.openNew':
    case 'Window.reload':
    case 'Window.unmaximize':
      return ModuleId.Window
    case 'Workbench.unload':
      return ModuleId.Workbench
    case 'Workspace.hydrate':
    case 'Workspace.setPath':
    case 'Workspace.setUri':
      return ModuleId.Workspace
    default:
      throw new Error(`command ${commandId} not found`)
  }
}
