// prettier-ignore
export const Commands = {
    // TODO command to set cursor position
}

// prettier-ignore
export const LazyCommands = {
  applyEdit: () => import('../EditorCommand/EditorCommandApplyEdit.js'),
  braceCompletion: () => import('../EditorCommand/EditorCommandBraceCompletion.js'),
  cancelSelection: () => import('../EditorCommand/EditorCommandCancelSelection.js'),
  closeCompletion: () => import('../EditorCommand/EditorCommandCloseCompletion.js'),
  compositionEnd: () => import('../EditorCommand/EditorCommandComposition.js'),
  compositionStart: () => import('../EditorCommand/EditorCommandComposition.js'),
  compositionUpdate: () => import('../EditorCommand/EditorCommandComposition.js'),
  contextMenu: () => import('../EditorCommand/EditorCommandHandleContextMenu.js'),
  copy: () => import('../EditorCommand/EditorCommandCopy.js'),
  copyLineDown: () => import('../EditorCommand/EditorCommandCopyLineDown.js'),
  copyLineUp: () => import('../EditorCommand/EditorCommandCopyLineUp.js'),
  cursorCharacterLeft: () => import('../EditorCommand/EditorCommandCursorCharacterLeft.js'),
  cursorCharacterRight: () => import('../EditorCommand/EditorCommandCursorCharacterRight.js'),
  cursorDown: () => import('../EditorCommand/EditorCommandCursorDown.js'),
  cursorEnd: () => import('../EditorCommand/EditorCommandCursorEnd.js'),
  cursorHome: () => import('../EditorCommand/EditorCommandCursorHome.js'),
  cursorLeft: () => import('../EditorCommand/EditorCommandCursorCharacterLeft.js'),
  cursorRight: () => import('../EditorCommand/EditorCommandCursorCharacterRight.js'),
  cursorSet: () => import('../EditorCommand/EditorCommandCursorSet.js'),
  cursorUp: () => import('../EditorCommand/EditorCommandCursorUp.js'),
  cursorWordLeft: () => import('../EditorCommand/EditorCommandCursorWordLeft.js'),
  cursorWordPartLeft: () => import('../EditorCommand/EditorCommandCursorWordPartLeft.js'),
  cursorWordPartRight: () => import('../EditorCommand/EditorCommandCursorWordPartRight.js'),
  cursorWordRight: () => import('../EditorCommand/EditorCommandCursorWordRight.js'),
  cut: () => import('../EditorCommand/EditorCommandCut.js'),
  deleteAllLeft: () => import('../EditorCommand/EditorCommandDeleteAllLeft.js'),
  deleteAllRight: () => import('../EditorCommand/EditorCommandDeleteAllRight.js'),
  deleteRight: () => import('../EditorCommand/EditorCommandDeleteCharacterRight.js'),

  deleteWordPartRight: () => import('../EditorCommand/EditorCommandDeleteWordPartRight.js'),
  deleteWordRight: () => import('../EditorCommand/EditorCommandDeleteWordRight.js'),
  format: () => import('../EditorCommand/EditorCommandFormat.js'),
  goToDefinition: () => import('../EditorCommand/EditorCommandGoToDefinition.js'),
  goToTypeDefinition: () => import('../EditorCommand/EditorCommandGoToTypeDefinition.js'),
  handleBeforeInputFromContentEditable: () => import('../EditorCommand/EditorCommandHandleNativeBeforeInputFromContentEditable.js'),
  handleContextMenu: () => import('../EditorCommand/EditorCommandHandleContextMenu.js'),

  handleMouseMove: () => import('../EditorCommand/EditorCommandHandleMouseMove.js'),
  handleMouseMoveWithAltKey: () => import('../EditorCommand/EditorCommandHandleMouseMoveWithAltKey.js'),
  handleNativeSelectionChange: () => import('../EditorCommand/EditorCommandHandleNativeSelectionChange.js'),
  handlePointerCaptureLost: () => import('../EditorCommand/EditorCommandHandlePointerCaptureLost.js'),
  handleScrollBarClick: () => import('../EditorCommand/EditorCommandHandleScrollBarPointerDown.js'),
  handleScrollBarHorizontalMove: ()=>import('../EditorCommand/EditorCommandHandleScrollBarHorizontalMove.js'),
  handleScrollBarHorizontalPointerDown: ()=>import('../EditorCommand/EditorCommandHandleScrollBarHorizontalPointerDown.js'),
  handleScrollBarMove: () => import('../EditorCommand/EditorCommandHandleScrollBarMove.js'),
  handleScrollBarVerticalPointerMove: () => import('../EditorCommand/EditorCommandHandleScrollBarMove.js'),
  handleScrollBarPointerDown: () => import('../EditorCommand/EditorCommandHandleScrollBarPointerDown.js'),
  handleScrollBarVerticalPointerDown: () => import('../EditorCommand/EditorCommandHandleScrollBarPointerDown.js'),
  handleTab: () => import('../EditorCommand/EditorCommandHandleTab.js'),
  handleTouchEnd: () => import('../EditorCommand/EditorCommandHandleTouchEnd.js'),
  handleTouchMove: () => import('../EditorCommand/EditorCommandHandleTouchMove.js'),
  handleTouchStart: () => import('../EditorCommand/EditorCommandHandleTouchStart.js'),
  indentLess: () => import('../EditorCommand/EditorCommandIndentLess.js'),
  indentMore: () => import('../EditorCommand/EditorCommandIndentMore.js'),
  insertLineBreak: () => import('../EditorCommand/EditorCommandInsertLineBreak.js'),
  moveLineDown: () => import('../EditorCommand/EditorCommandMoveLineDown.js'),
  moveLineUp: () => import('../EditorCommand/EditorCommandMoveLineUp.js'),
  moveRectangleSelection: () => import('../EditorCommand/EditorCommandMoveRectangleSelection.js'),
  moveRectangleSelectionPx: () => import('../EditorCommand/EditorCommandMoveRectangleSelectionPx.js'),
  moveSelection: () => import('../EditorCommand/EditorCommandMoveSelection.js'),
  moveSelectionPx: () => import('../EditorCommand/EditorCommandMoveSelectionPx.js'),
  openCompletion: () => import('../EditorCommand/EditorCommandCompletion.js'),
  openFind: () => import('../EditorCommand/EditorCommandOpenFind.js'),
  paste: () => import('../EditorCommand/EditorCommandPaste.js'),
  pasteText: () => import('../EditorCommand/EditorCommandPasteText.js'),
  save: () => import('../EditorCommand/EditorCommandSave.js'),
  selectAll: () => import('../EditorCommand/EditorCommandSelectAll.js'),
  selectAllOccurrences: () => import('../EditorCommand/EditorCommandSelectAllOccurrences.js'),
  selectCharacterLeft: () => import('../EditorCommand/EditorCommandSelectCharacterLeft.js'),
  selectCharacterRight: () => import('../EditorCommand/EditorCommandSelectCharacterRight.js'),
  selectDown: () => import('../EditorCommand/EditorCommandSelectDown.js'),
  selectInsideString: () => import('../EditorCommand/EditorCommandSelectInsideString.js'),
  selectLine: () => import('../EditorCommand/EditorCommandSelectLine.js'),
  selectNextOccurrence: () => import('../EditorCommand/EditorCommandSelectNextOccurrence.js'),
  selectUp: () => import('../EditorCommand/EditorCommandSelectUp.js'),
  selectWord: () => import('../EditorCommand/EditorCommandSelectWord.js'),
  selectWordLeft: () => import('../EditorCommand/EditorCommandSelectWordLeft.js'),
  selectWordRight: () => import('../EditorCommand/EditorCommandSelectWordRight.js'),
  setDecorations: () => import('../EditorCommand/EditorCommandSetDecorations.js'),
  setDeltaY: () => import('../EditorCommand/EditorCommandSetDelta.js'),
  setDelta: () => import('../EditorCommand/EditorCommandSetDelta.js'),
  setLanguageId: () => import('../EditorCommand/EditorCommandSetLanguageId.js'),
  setSelections: () => import('../EditorCommand/EditorCommandSetSelections.js'),
  sortLinesAscending: () => import('../EditorCommand/EditorCommandSortLinesAscending.js'),
  tabCompletion: () => import('../EditorCommand/EditorCommandTabCompletion.js'),
  toggleBlockComment: () => import('../EditorCommand/EditorCommandToggleBlockComment.js'),
  toggleComment: () => import('../EditorCommand/EditorCommandToggleComment.js'),
  type: () => import('../EditorCommand/EditorCommandType.js'),
  undo: () => import('../EditorCommand/EditorCommandUndo.js'),
  unIndent: () => import('../EditorCommand/EditorCommandUnindent.js'),
  replaceRange: () => import('../EditorCommand/EditorCommandReplaceRange.js'),
  showHover: () => import('../EditorCommand/EditorCommandShowHover.js')
}

export const CommandsWithSideEffectsLazy = {
  typeWithAutoClosing: () => import('../EditorCommand/EditorCommandTypeWithAutoClosing.js'),
  handleSingleClick: () => import('../EditorCommand/EditorCommandHandleSingleClick.js'),
  deleteWordLeft: () => import('../EditorCommand/EditorCommandDeleteWordLeft.js'),
  deleteWordPartLeft: () => import('../EditorCommand/EditorCommandDeleteWordPartLeft.js'),
  blur: () => import('../EditorCommand/EditorCommandBlur.js'),
  deleteLeft: () => import('../EditorCommand/EditorCommandDeleteCharacterLeft.js'),
  handleDoubleClick: () => import('../EditorCommand/EditorCommandHandleDoubleClick.js'),
  handleMouseDown: () => import('../EditorCommand/EditorCommandHandleMouseDown.js'),
  handleTripleClick: () => import('../EditorCommand/EditorCommandHandleTripleClick.js'),
}
