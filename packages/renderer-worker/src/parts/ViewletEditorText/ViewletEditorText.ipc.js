import * as LazyCommand from '../LazyCommand/LazyCommand.js'
import * as ViewletEditorText from './ViewletEditorText.js'

// prettier-ignore
const Imports = {
  ApplyEdit: () => import('../EditorCommand/EditorCommandApplyEdit.js'),
  Blur: () => import('../EditorCommand/EditorCommandBlur.js'),
  BraceCompletion: () => import('../EditorCommand/EditorCommandBraceCompletion.js'),
  CancelSelection: () => import('../EditorCommand/EditorCommandCancelSelection.js'),
  ContextMenu: () => import('../EditorCommand/EditorCommandHandleContextMenu.js'),
  CopyLineDown: () => import('../EditorCommand/EditorCommandCopyLineDown.js'),
  CopyLineUp: () => import('../EditorCommand/EditorCommandCopyLineUp.js'),
  CursorCharacterLeft: () => import('../EditorCommand/EditorCommandCursorCharacterLeft.js'),
  CursorCharacterRight: () => import('../EditorCommand/EditorCommandCursorCharacterRight.js'),
  CursorDown: () => import('../EditorCommand/EditorCommandCursorDown.js'),
  CursorEnd: () => import('../EditorCommand/EditorCommandCursorEnd.js'),
  CursorHome: () => import('../EditorCommand/EditorCommandCursorHome.js'),
  CursorSet: () => import('../EditorCommand/EditorCommandCursorSet.js'),
  CursorUp: () => import('../EditorCommand/EditorCommandCursorUp.js'),
  CursorWordLeft: () => import('../EditorCommand/EditorCommandCursorWordLeft.js'),
  CursorWordPartLeft: () => import('../EditorCommand/EditorCommandCursorWordPartLeft.js'),
  CursorWordPartRight: () => import('../EditorCommand/EditorCommandCursorWordPartRight.js'),
  CursorWordRight: () => import('../EditorCommand/EditorCommandCursorWordRight.js'),
  Cut: () => import('../EditorCommand/EditorCommandCut.js'),
  DeleteAllLeft: () => import('../EditorCommand/EditorCommandDeleteAllLeft.js'),
  DeleteAllRight: () => import('../EditorCommand/EditorCommandDeleteAllRight.js'),
  DeleteLeft: () => import('../EditorCommand/EditorCommandDeleteCharacterLeft.js'),
  DeleteRight: () => import('../EditorCommand/EditorCommandDeleteCharacterRight.js'),
  DeleteWordLeft: () => import('../EditorCommand/EditorCommandDeleteWordLeft.js'),
  DeleteWordPartLeft: () => import('../EditorCommand/EditorCommandDeleteWordPartLeft.js'),
  DeleteWordPartRight: () => import('../EditorCommand/EditorCommandDeleteWordPartRight.js'),
  DeleteWordRight: () => import('../EditorCommand/EditorCommandDeleteWordRight.js'),
  EditorCompletion: () => import('../EditorCommand/EditorCommandCompletion.js'),
  EditorComposition: () => import('../EditorCommand/EditorCommandComposition.js'),
  EditorCopy: () => import('../EditorCommand/EditorCommandCopy.js'),
  EditorFind: () => import('../EditorCommand/EditorCommandOpenFind.js'),
  EditorSetSelections: () => import('../EditorCommand/EditorCommandSetSelections.js'),
  Format: () => import('../EditorCommand/EditorCommandFormat.js'),
  GoToDefinition: () => import('../EditorCommand/EditorCommandGoToDefinition.js'),
  GoToTypeDefinition: () => import('../EditorCommand/EditorCommandGoToTypeDefinition.js'),
  HandleBeforeInputFromContentEditable: () => import('../EditorCommand/EditorCommandHandleNativeBeforeInputFromContentEditable.js'),
  HandleDoubleClick: () => import('../EditorCommand/EditorCommandHandleDoubleClick.js'),
  HandleMouseMove: () => import('../EditorCommand/EditorCommandHandleMouseMove.js'),
  HandleMouseMoveWithAltKey: () => import('../EditorCommand/EditorCommandHandleMouseMoveWithAltKey.js'),
  HandleNativeSelectionChange: () => import('../EditorCommand/EditorCommandHandleNativeSelectionChange.js'),
  HandleScrollBarClick: () => import('../EditorCommand/EditorCommandHandleScrollBarPointerDown.js'),
  HandleScrollBarMove: () => import('../EditorCommand/EditorCommandHandleScrollBarMove.js'),
  HandleSingleClick: () => import('../EditorCommand/EditorCommandHandleSingleClick.js'),
  HandleTab: () => import('../EditorCommand/EditorCommandHandleTab.js'),
  HandleTouchEnd: () => import('../EditorCommand/EditorCommandHandleTouchEnd.js'),
  HandleTouchMove: () => import('../EditorCommand/EditorCommandHandleTouchMove.js'),
  HandleTouchStart: () => import('../EditorCommand/EditorCommandHandleTouchStart.js'),
  HandleTripleClick: () => import('../EditorCommand/EditorCommandHandleTripleClick.js'),
  IndentLess: () => import('../EditorCommand/EditorCommandIndentLess.js'),
  IndentMore: () => import('../EditorCommand/EditorCommandIndentMore.js'),
  InsertLineBreak: () => import('../EditorCommand/EditorCommandInsertLineBreak.js'),
  MoveLineDown: () => import('../EditorCommand/EditorCommandMoveLineDown.js'),
  MoveLineUp: () => import('../EditorCommand/EditorCommandMoveLineUp.js'),
  MoveRectangleSelection: () => import('../EditorCommand/EditorCommandMoveRectangleSelection.js'),
  MoveRectangleSelectionPx: () => import('../EditorCommand/EditorCommandMoveRectangleSelectionPx.js'),
  MoveSelection: () => import('../EditorCommand/EditorCommandMoveSelection.js'),
  MoveSelectionPx: () => import('../EditorCommand/EditorCommandMoveSelectionPx.js'),
  Paste: () => import('../EditorCommand/EditorCommandPaste.js'),
  PasteText: () => import('../EditorCommand/EditorCommandPasteText.js'),
  Save: () => import('../EditorCommand/EditorCommandSave.js'),
  SelectAll: () => import('../EditorCommand/EditorCommandSelectAll.js'),
  SelectAllOccurrences: () => import('../EditorCommand/EditorCommandSelectAllOccurrences.js'),
  SelectCharacterLeft: () => import('../EditorCommand/EditorCommandSelectCharacterLeft.js'),
  SelectCharacterRight: () => import('../EditorCommand/EditorCommandSelectCharacterRight.js'),
  SelectDown: () => import('../EditorCommand/EditorCommandSelectDown.js'),
  SelectInsideString: () => import('../EditorCommand/EditorCommandSelectInsideString.js'),
  SelectLine: () => import('../EditorCommand/EditorCommandSelectLine.js'),
  SelectNextOccurrence: () => import('../EditorCommand/EditorCommandSelectNextOccurrence.js'),
  SelectUp: () => import('../EditorCommand/EditorCommandSelectUp.js'),
  SelectWord: () => import('../EditorCommand/EditorCommandSelectWord.js'),
  SelectWordLeft: () => import('../EditorCommand/EditorCommandSelectWordLeft.js'),
  SelectWordRight: () => import('../EditorCommand/EditorCommandSelectWordRight.js'),
  SetDecorations: () => import('../EditorCommand/EditorCommandSetDecorations.js'),
  SetDeltaY: () => import('../EditorCommand/EditorCommandSetDeltaY.js'),
  SetLanguageId: () => import('../EditorCommand/EditorCommandSetLanguageId.js'),
  SortLinesAscending: () => import('../EditorCommand/EditorCommandSortLinesAscending.js'),
  TabCompletion: () => import('../EditorCommand/EditorCommandTabCompletion.js'),
  ToggleBlockComment: () => import('../EditorCommand/EditorCommandToggleBlockComment.js'),
  ToggleComment: () => import('../EditorCommand/EditorCommandToggleComment.js'),
  Type: () => import('../EditorCommand/EditorCommandType.js'),
  Undo: () => import('../EditorCommand/EditorCommandUndo.js'),
  UnIndent: () => import('../EditorCommand/EditorCommandUnindent.js'),
}

// prettier-ignore
export const Commands = {
    // TODO command to set cursor position
  applyEdit: LazyCommand.create('EditorText', Imports.ApplyEdit, 'editorApplyEdit'),
  blur: LazyCommand.create('EditorText', Imports.Blur, 'editorBlur'), // TODO needed?
  braceCompletion: LazyCommand.create('EditorText', Imports.BraceCompletion, 'editorBraceCompletion'),
  cancelSelection: LazyCommand.create('EditorText', Imports.CancelSelection, 'editorCancelSelection'),
  close: LazyCommand.create('EditorText', Imports.EditorCompletion, 'close'),
  compositionEnd: LazyCommand.create('EditorText', Imports.EditorComposition,'editorCompositionEnd'),
  compositionStart: LazyCommand.create('EditorText', Imports.EditorComposition,'editorCompositionStart'),
  compositionUpdate: LazyCommand.create('EditorText', Imports.EditorComposition,'editorCompositionUpdate'),
  copy: LazyCommand.create('EditorText', Imports.EditorCopy, 'editorCopy'),
  copyLineDown: LazyCommand.create('EditorText', Imports.CopyLineDown, 'editorCopyLineDown'),
  copyLineUp: LazyCommand.create('EditorText', Imports.CopyLineUp, 'editorCopyLineUp'),
  cursorCharacterLeft: LazyCommand.create('EditorText', Imports.CursorCharacterLeft, 'editorCursorCharacterLeft'),
  cursorCharacterRight: LazyCommand.create('EditorText', Imports.CursorCharacterRight, 'editorCursorCharacterRight'),
  cursorDown: LazyCommand.create('EditorText', Imports.CursorDown, 'editorCursorDown'),
  cursorEnd: LazyCommand.create('EditorText', Imports.CursorEnd, 'editorCursorEnd'),
  cursorHome: LazyCommand.create('EditorText', Imports.CursorHome, 'editorCursorsHome'),
  cursorLeft: LazyCommand.create('EditorText', Imports.CursorCharacterLeft, 'editorCursorCharacterLeft'),
  cursorRight: LazyCommand.create('EditorText', Imports.CursorCharacterRight, 'editorCursorCharacterRight'),
  cursorSet: LazyCommand.create('EditorText', Imports.CursorSet, 'editorCursorSet') ,
  cursorUp: LazyCommand.create('EditorText', Imports.CursorUp, 'editorCursorsUp'),
  cursorWordLeft: LazyCommand.create('EditorText', Imports.CursorWordLeft, 'editorCursorWordLeft'),
  cursorWordPartLeft: LazyCommand.create('EditorText', Imports.CursorWordPartLeft,'editorCursorWordPartLeft'),
  cursorWordPartRight: LazyCommand.create('EditorText', Imports.CursorWordPartRight, 'editorCursorWordPartRight'),
  cursorWordRight: LazyCommand.create('EditorText', Imports.CursorWordRight, 'editorCursorWordRight'),
  cut: LazyCommand.create('EditorText', Imports.Cut, 'editorCut'),
  deleteAllLeft: LazyCommand.create('EditorText', Imports.DeleteAllLeft, 'editorDeleteAllLeft'),
  deleteAllRight: LazyCommand.create('EditorText', Imports.DeleteAllRight, 'editorDeleteAllRight'),
  deleteLeft: LazyCommand.create('EditorText', Imports.DeleteLeft, 'editorDeleteCharacterLeft'),
  deleteRight: LazyCommand.create('EditorText', Imports.DeleteRight, 'editorDeleteCharacterRight'),
  deleteWordLeft: LazyCommand.create('EditorText', Imports.DeleteWordLeft, 'editorDeleteWordLeft'),
  deleteWordPartLeft: LazyCommand.create('EditorText', Imports.DeleteWordPartLeft, 'editorDeleteWordPartLeft'),
  deleteWordPartRight: LazyCommand.create('EditorText', Imports.DeleteWordPartRight, 'editorDeleteWordPartRight'),
  deleteWordRight: LazyCommand.create('EditorText', Imports.DeleteWordRight, 'editorDeleteWordRight'),
  format: LazyCommand.create('EditorText', Imports.Format, 'editorFormat'),
  goToDefinition: LazyCommand.create('EditorText', Imports.GoToDefinition, 'editorGoToDefinition'),
  goToTypeDefinition: LazyCommand.create('EditorText', Imports.GoToTypeDefinition, 'editorGoToTypeDefinition'),
  handleBeforeInputFromContentEditable: LazyCommand.create('EditorText', Imports.HandleBeforeInputFromContentEditable, 'handleBeforeInputFromContentEditable'),
  handleContextMenu: LazyCommand.create('EditorText', Imports.ContextMenu, 'editorHandleContextMenu'),
  handleDoubleClick: LazyCommand.create('EditorText', Imports.HandleDoubleClick, 'editorHandleDoubleClick'),
  handleMouseMove: LazyCommand.create('EditorText', Imports.HandleMouseMove, 'editorHandleMouseMove'),
  handleMouseMoveWithAltKey: LazyCommand.create('EditorText', Imports.HandleMouseMoveWithAltKey, 'editorHandleMouseMoveWithAltKey'),
  handleNativeSelectionChange: LazyCommand.create('EditorText', Imports.HandleNativeSelectionChange, 'editorHandleNativeSelectionChange'),
  handleScrollBarMove: LazyCommand.create('EditorText', Imports.HandleScrollBarMove, 'editorHandleScrollBarMove'),
  handleScrollBarPointerDown: LazyCommand.create('EditorText', Imports.HandleScrollBarClick, 'handleScrollBarPointerDown'),
  handleSingleClick: LazyCommand.create('EditorText', Imports.HandleSingleClick, 'editorHandleSingleClick'),
  handleTab: LazyCommand.create('EditorText', Imports.HandleTab, 'editorHandleTab'),
  handleTouchEnd: LazyCommand.create('EditorText', Imports.HandleTouchEnd, 'editorHandleTouchEnd'),
  handleTouchMove: LazyCommand.create('EditorText', Imports.HandleTouchMove, 'editorHandleTouchMove'),
  handleTouchStart: LazyCommand.create('EditorText', Imports.HandleTouchStart, 'editorHandleTouchstart'),
  handleTripleClick: LazyCommand.create('EditorText', Imports.HandleTripleClick, 'editorHandleTripleClick'),
  indentLess: LazyCommand.create('EditorText', Imports.IndentLess, 'editorIndentLess'),
  indentMore: LazyCommand.create('EditorText', Imports.IndentMore, 'editorIndentMore'),
  insertLineBreak: LazyCommand.create('EditorText', Imports.InsertLineBreak, 'editorInsertLineBreak'),
  moveLineDown: LazyCommand.create('EditorText', Imports.MoveLineDown, 'editorMoveLineDown'),
  moveLineUp: LazyCommand.create('EditorText', Imports.MoveLineUp, 'editorMoveLineUp'),
  moveRectangleSelection: LazyCommand.create('EditorText', Imports.MoveRectangleSelection, 'editorMoveRectangleSelection'),
  moveRectangleSelectionPx: LazyCommand.create('EditorText', Imports.MoveRectangleSelectionPx, 'editorMoveRectangleSelectionPx'),
  moveSelection: LazyCommand.create('EditorText', Imports.MoveSelection, 'editorMoveSelection'),
  moveSelectionPx: LazyCommand.create('EditorText', Imports.MoveSelectionPx, 'editorMoveSelectionPx'),
  openCompletion: LazyCommand.create('EditorText', Imports.EditorCompletion, 'open'),
  openCompletionFromType: LazyCommand.create('EditorText', Imports.EditorCompletion, 'openFromType'),
  openFind: LazyCommand.create('EditorText', Imports.EditorFind, 'openFind'),
  paste: LazyCommand.create('EditorText', Imports.Paste, 'editorPaste'),
  pasteText: LazyCommand.create('EditorText', Imports.PasteText, 'editorPasteText'),
  save: LazyCommand.create('EditorText', Imports.Save, 'editorSave'),
  selectAll: LazyCommand.create('EditorText', Imports.SelectAll, 'editorSelectAll'),
  selectAllOccurrences: LazyCommand.create('EditorText', Imports.SelectAllOccurrences, 'editorSelectAllOccurrences'),
  selectCharacterLeft: LazyCommand.create('EditorText', Imports.SelectCharacterLeft, 'editorSelectCharacterLeft'),
  selectCharacterRight: LazyCommand.create('EditorText', Imports.SelectCharacterRight, 'editorSelectCharacterRight'),
  selectDown: LazyCommand.create('EditorText', Imports.SelectDown, 'selectDown'),
  selectInsideString: LazyCommand.create('EditorText', Imports.SelectInsideString, 'editorSelectInsideString'),
  selectLine: LazyCommand.create('EditorText', Imports.SelectLine, 'editorSelectLine'),
  selectNextOccurrence: LazyCommand.create('EditorText', Imports.SelectNextOccurrence, 'editorSelectNextOccurrence'),
  selectUp: LazyCommand.create('EditorText', Imports.SelectUp, 'selectUp'),
  selectWord: LazyCommand.create('EditorText', Imports.SelectWord, 'editorSelectWord'),
  selectWordLeft: LazyCommand.create('EditorText', Imports.SelectWordLeft, 'editorSelectWordLeft'),
  selectWordRight: LazyCommand.create('EditorText', Imports.SelectWordRight, 'editorSelectWordRight'),
  setDecorations: LazyCommand.create('EditorText', Imports.SetDecorations, 'setDecorations'),
  setDeltaY: LazyCommand.create('EditorText', Imports.SetDeltaY, 'editorSetDeltaY'),
  setLanguageId: LazyCommand.create('EditorText', Imports.SetLanguageId, 'setLanguageId'),
  setSelections: LazyCommand.create('EditorText', Imports.EditorSetSelections, 'setSelections'),
  sortLinesAscending: LazyCommand.create('EditorText', Imports.SortLinesAscending, 'sortLinesAscending'),
  tabCompletion: LazyCommand.create('EditorText', Imports.TabCompletion, 'editorTabCompletion'),
  toggleBlockComment: LazyCommand.create('EditorText', Imports.ToggleBlockComment, 'editorToggleBlockComment'),
  toggleComment: LazyCommand.create('EditorText', Imports.ToggleComment, 'editorToggleComment'),
  type: LazyCommand.create('EditorText', Imports.Type, 'editorType'),
  undo: LazyCommand.create('EditorText', Imports.Undo, 'editorUndo'),
  unindent: LazyCommand.create('EditorText', Imports.UnIndent, 'selectUp'),
}

// prettier-ignore
export const Events = {
  'languages.changed': ViewletEditorText.handleLanguagesChanged,
  // 'editor.change': ViewletEditorText.handleEditorChange,
  // 'tokenizer.changed': ViewletEditorText.handleTokenizeChange,
}

export const Css = '/css/parts/ViewletEditor.css'

export * from './ViewletEditorText.js'
