import * as Viewlet from '../Viewlet/Viewlet.js'
import * as ViewletStates from '../ViewletStates/ViewletStates.js'

const lazyCommand = (importFn, key) => {
  const lazyCommand = async (editor, ...args) => {
    const module = await importFn()
    const fn = module[key]
    // editor might have changed during import, need to apply function to latest editor
    const latestEditor = ViewletStates.getState('EditorText')
    if (typeof fn !== 'function') {
      throw new Error(`Editor.${key} is not a function`)
    }
    return fn(latestEditor, ...args)
  }
  return Viewlet.wrapViewletCommand('EditorText', lazyCommand)
}

// prettier-ignore
const Imports = {
  ApplyEdit: () => import('../EditorCommand/EditorCommandApplyEdit.js'),
  Blur: () => import('../EditorCommand/EditorCommandBlur.js'),
  BraceCompletion: () => import('../EditorCommand/EditorCommandBraceCompletion.js'),
  CancelSelection: () => import('../EditorCommand/EditorCommandCancelSelection.js'),
  ContextMenu: () => import('../EditorCommand/EditorCommandHandleContextMenu.js'),
  CopyLineDown: () => import('../EditorCommand/EditorCommandCopyLineDown.js'),
  CopyLineUp: () => import('../EditorCommand/EditorCommandCopyLineUp.js'),
  CursorCharacterLeft: () => import('../EditorCommand/EditorCommandCursorCharacterLeft.js'),
  CursorCharacterRight: () => import('../EditorCommand/EditorCommandCursorCharacterRight.js'),
  CursorDown: () => import('../EditorCommand/EditorCommandCursorDown.js'),
  CursorEnd: () => import('../EditorCommand/EditorCommandCursorEnd.js'),
  CursorHome: () => import('../EditorCommand/EditorCommandCursorHome.js'),
  CursorSet: () => import('../EditorCommand/EditorCommandCursorSet.js'),
  CursorUp: () => import('../EditorCommand/EditorCommandCursorUp.js'),
  CursorWordLeft: () => import('../EditorCommand/EditorCommandCursorWordLeft.js'),
  CursorWordPartLeft: () => import('../EditorCommand/EditorCommandCursorWordPartLeft.js'),
  CursorWordPartRight: () => import('../EditorCommand/EditorCommandCursorWordPartRight.js'),
  CursorWordRight: () => import('../EditorCommand/EditorCommandCursorWordRight.js'),
  Cut: () => import('../EditorCommand/EditorCommandCut.js'),
  DeleteAllLeft: () => import('../EditorCommand/EditorCommandDeleteAllLeft.js'),
  DeleteAllRight: () => import('../EditorCommand/EditorCommandDeleteAllRight.js'),
  DeleteLeft: () => import('../EditorCommand/EditorCommandDeleteCharacterLeft.js'),
  DeleteRight: () => import('../EditorCommand/EditorCommandDeleteCharacterRight.js'),
  DeleteWordLeft: () => import('../EditorCommand/EditorCommandDeleteWordLeft.js'),
  DeleteWordPartLeft: () => import('../EditorCommand/EditorCommandDeleteWordPartLeft.js'),
  DeleteWordPartRight: () => import('../EditorCommand/EditorCommandDeleteWordPartRight.js'),
  DeleteWordRight: () => import('../EditorCommand/EditorCommandDeleteWordRight.js'),
  EditorCompletion: () => import('../EditorCommand/EditorCommandCompletion.js'),
  EditorComposition: () => import('../EditorCommand/EditorCommandComposition.js'),
  EditorCopy: () => import('../EditorCommand/EditorCommandCopy.js'),
  Format: () => import('../EditorCommand/EditorCommandFormat.js'),
  GoToDefinition: () => import('../EditorCommand/EditorCommandGoToDefinition.js'),
  GoToTypeDefinition: () => import('../EditorCommand/EditorCommandGoToTypeDefinition.js'),
  HandleBeforeInputFromContentEditable: () => import('../EditorCommand/EditorCommandHandleNativeBeforeInputFromContentEditable.js'),
  HandleDoubleClick: () => import('../EditorCommand/EditorCommandHandleDoubleClick.js'),
  HandleMouseMove: () => import('../EditorCommand/EditorCommandHandleMouseMove.js'),
  HandleMouseMoveWithAltKey: () => import('../EditorCommand/EditorCommandHandleMouseMoveWithAltKey.js'),
  HandleNativeSelectionChange: () => import('../EditorCommand/EditorCommandHandleNativeSelectionChange.js'),
  HandleScrollBarClick: () => import('../EditorCommand/EditorCommandHandleScrollBarClick.js'),
  HandleScrollBarMove: () => import('../EditorCommand/EditorCommandHandleScrollBarMove.js'),
  HandleSingleClick: () => import('../EditorCommand/EditorCommandHandleSingleClick.js'),
  HandleTab: () => import('../EditorCommand/EditorCommandHandleTab.js'),
  HandleTouchEnd: () => import('../EditorCommand/EditorCommandHandleTouchEnd.js'),
  HandleTouchMove: () => import('../EditorCommand/EditorCommandHandleTouchMove.js'),
  HandleTouchStart: () => import('../EditorCommand/EditorCommandHandleTouchStart.js'),
  HandleTripleClick: () => import('../EditorCommand/EditorCommandHandleTripleClick.js'),
  IndentLess: () => import('../EditorCommand/EditorCommandIndentLess.js'),
  IndentMore: () => import('../EditorCommand/EditorCommandIndentMore.js'),
  InsertLineBreak: () => import('../EditorCommand/EditorCommandInsertLineBreak.js'),
  MoveLineDown: () => import('../EditorCommand/EditorCommandMoveLineDown.js'),
  MoveLineUp: () => import('../EditorCommand/EditorCommandMoveLineUp.js'),
  MoveRectangleSelection: () => import('../EditorCommand/EditorCommandMoveRectangleSelection.js'),
  MoveRectangleSelectionPx: () => import('../EditorCommand/EditorCommandMoveRectangleSelectionPx.js'),
  MoveSelection: () => import('../EditorCommand/EditorCommandMoveSelection.js'),
  MoveSelectionPx: () => import('../EditorCommand/EditorCommandMoveSelectionPx.js'),
  Paste: () => import('../EditorCommand/EditorCommandPaste.js'),
  PasteText: () => import('../EditorCommand/EditorCommandPasteText.js'),
  Save: () => import('../EditorCommand/EditorCommandSave.js'),
  SelectAll: () => import('../EditorCommand/EditorCommandSelectAll.js'),
  SelectAllOccurrences: () => import('../EditorCommand/EditorCommandSelectAllOccurrences.js'),
  SelectCharacterLeft: () => import('../EditorCommand/EditorCommandSelectCharacterLeft.js'),
  SelectCharacterRight: () => import('../EditorCommand/EditorCommandSelectCharacterRight.js'),
  SelectDown: () => import('../EditorCommand/EditorCommandSelectDown.js'),
  SelectInsideString: () => import('../EditorCommand/EditorCommandSelectInsideString.js'),
  SelectLine: () => import('../EditorCommand/EditorCommandSelectLine.js'),
  SelectNextOccurrence: () => import('../EditorCommand/EditorCommandSelectNextOccurrence.js'),
  SelectUp: () => import('../EditorCommand/EditorCommandSelectUp.js'),
  SelectWord: () => import('../EditorCommand/EditorCommandSelectWord.js'),
  SelectWordLeft: () => import('../EditorCommand/EditorCommandSelectWordLeft.js'),
  SelectWordRight: () => import('../EditorCommand/EditorCommandSelectWordRight.js'),
  SetDecorations: () => import('../EditorCommand/EditorCommandSetDecorations.js'),
  SetDeltaY: () => import('../EditorCommand/EditorCommandSetDeltaY.js'),
  SetLanguageId: () => import('../EditorCommand/EditorCommandSetLanguageId.js'),
  SortLinesAscending: () => import('../EditorCommand/EditorCommandSortLinesAscending.js'),
  TabCompletion: () => import('../EditorCommand/EditorCommandTabCompletion.js'),
  ToggleBlockComment: () => import('../EditorCommand/EditorCommandToggleBlockComment.js'),
  ToggleComment: () => import('../EditorCommand/EditorCommandToggleComment.js'),
  Type: () => import('../EditorCommand/EditorCommandType.js'),
  Undo: () => import('../EditorCommand/EditorCommandUndo.js'),
  UnIndent: () => import('../EditorCommand/EditorCommandUnindent.js'),
}

// prettier-ignore
export const Commands = {
  'Editor.applyEdit': lazyCommand(Imports.ApplyEdit, 'editorApplyEdit'),
  'Editor.blur': lazyCommand(Imports.Blur, 'editorBlur'), // TODO needed?
  'Editor.braceCompletion': lazyCommand(Imports.BraceCompletion, 'editorBraceCompletion'),
  'Editor.cancelSelection': lazyCommand(Imports.CancelSelection, 'editorCancelSelection'),
  'Editor.close': lazyCommand(Imports.EditorCompletion, 'close'),
  'Editor.compositionEnd': lazyCommand(Imports.EditorComposition,'editorCompositionEnd'),
  'Editor.compositionStart': lazyCommand(Imports.EditorComposition,'editorCompositionStart'),
  'Editor.compositionUpdate': lazyCommand(Imports.EditorComposition,'editorCompositionUpdate'),
  'Editor.copy': lazyCommand(Imports.EditorCopy, 'editorCopy'),
  'Editor.copyLineDown': lazyCommand(Imports.CopyLineDown, 'editorCopyLineDown'),
  'Editor.copyLineUp': lazyCommand(Imports.CopyLineUp, 'editorCopyLineUp'),
  'Editor.cursorCharacterLeft': lazyCommand(Imports.CursorCharacterLeft, 'editorCursorCharacterLeft'),
  'Editor.cursorCharacterRight': lazyCommand(Imports.CursorCharacterRight, 'editorCursorCharacterRight'),
  'Editor.cursorDown': lazyCommand(Imports.CursorDown, 'editorCursorDown'),
  'Editor.cursorEnd': lazyCommand(Imports.CursorEnd, 'editorCursorEnd'),
  'Editor.cursorHome': lazyCommand(Imports.CursorHome, 'editorCursorsHome'),
  'Editor.cursorLeft': lazyCommand(Imports.CursorCharacterLeft, 'editorCursorCharacterLeft'),
  'Editor.cursorRight': lazyCommand(Imports.CursorCharacterRight, 'editorCursorCharacterRight'),
  'Editor.cursorSet': lazyCommand(Imports.CursorSet, 'editorCursorSet') ,
  'Editor.cursorUp': lazyCommand(Imports.CursorUp, 'editorCursorsUp'),
  'Editor.cursorWordLeft': lazyCommand(Imports.CursorWordLeft, 'editorCursorWordLeft'),
  'Editor.cursorWordPartLeft': lazyCommand(Imports.CursorWordPartLeft,'editorCursorWordPartLeft'),
  'Editor.cursorWordPartRight': lazyCommand(Imports.CursorWordPartRight, 'editorCursorWordPartRight'),
  'Editor.cursorWordRight': lazyCommand(Imports.CursorWordRight, 'editorCursorWordRight'),
  'Editor.cut': lazyCommand(Imports.Cut, 'editorCut'),
  'Editor.deleteAllLeft': lazyCommand(Imports.DeleteAllLeft, 'editorDeleteAllLeft'),
  'Editor.deleteAllRight': lazyCommand(Imports.DeleteAllRight, 'editorDeleteAllRight'),
  'Editor.deleteLeft': lazyCommand(Imports.DeleteLeft, 'editorDeleteCharacterLeft'),
  'Editor.deleteRight': lazyCommand(Imports.DeleteRight, 'editorDeleteCharacterRight'),
  'Editor.deleteWordLeft': lazyCommand(Imports.DeleteWordLeft, 'editorDeleteWordLeft'),
  'Editor.deleteWordPartLeft': lazyCommand(Imports.DeleteWordPartLeft, 'editorDeleteWordPartLeft'),
  'Editor.deleteWordPartRight':lazyCommand(Imports.DeleteWordPartRight, 'editorDeleteWordPartRight'),
  'Editor.deleteWordRight': lazyCommand(Imports.DeleteWordRight, 'editorDeleteWordRight'),
  'Editor.format': lazyCommand(Imports.Format, 'editorFormat'),
  'Editor.goToDefinition': lazyCommand(Imports.GoToDefinition, 'editorGoToDefinition'),
  'Editor.goToTypeDefinition': lazyCommand(Imports.GoToTypeDefinition, 'editorGoToTypeDefinition'),
  'Editor.handleBeforeInputFromContentEditable': lazyCommand(Imports.HandleBeforeInputFromContentEditable, 'handleBeforeInputFromContentEditable'),
  'Editor.handleContextMenu': lazyCommand(Imports.ContextMenu, 'editorHandleContextMenu'),
  'Editor.handleDoubleClick': lazyCommand(Imports.HandleDoubleClick, 'editorHandleDoubleClick'),
  'Editor.handleMouseMove': lazyCommand(Imports.HandleMouseMove, 'editorHandleMouseMove'),
  'Editor.handleMouseMoveWithAltKey': lazyCommand(Imports.HandleMouseMoveWithAltKey, 'editorHandleMouseMoveWithAltKey'),
  'Editor.handleNativeSelectionChange': lazyCommand(Imports.HandleNativeSelectionChange, 'editorHandleNativeSelectionChange'),
  'Editor.handleScrollBarClick': lazyCommand(Imports.HandleScrollBarClick, 'editorHandleScrollBarClick'),
  'Editor.handleScrollBarMove': lazyCommand(Imports.HandleScrollBarMove, 'editorHandleScrollBarMove'),
  'Editor.handleSingleClick': lazyCommand(Imports.HandleSingleClick, 'editorHandleSingleClick'),
  'Editor.handleTab': lazyCommand(Imports.HandleTab, 'editorHandleTab'),
  'Editor.handleTouchEnd': lazyCommand(Imports.HandleTouchEnd, 'editorHandleTouchEnd'),
  'Editor.handleTouchMove': lazyCommand(Imports.HandleTouchMove, 'editorHandleTouchMove'),
  'Editor.handleTouchStart': lazyCommand(Imports.HandleTouchStart, 'editorHandleTouchstart'),
  'Editor.handleTripleClick': lazyCommand(Imports.HandleTripleClick, 'editorHandleTripleClick'),
  'Editor.indentLess': lazyCommand(Imports.IndentLess, 'editorIndentLess'),
  'Editor.indentMore': lazyCommand(Imports.IndentMore, 'editorIndentMore'),
  'Editor.insertLineBreak': lazyCommand(Imports.InsertLineBreak, 'editorInsertLineBreak'),
  'Editor.moveLineDown': lazyCommand(Imports.MoveLineDown, 'editorMoveLineDown'),
  'Editor.moveLineUp': lazyCommand(Imports.MoveLineUp, 'editorMoveLineUp'),
  'Editor.moveRectangleSelection': lazyCommand(Imports.MoveRectangleSelection, 'editorMoveRectangleSelection'),
  'Editor.moveRectangleSelectionPx': lazyCommand(Imports.MoveRectangleSelectionPx, 'editorMoveRectangleSelectionPx'),
  'Editor.moveSelection': lazyCommand(Imports.MoveSelection, 'editorMoveSelection'),
  'Editor.moveSelectionPx': lazyCommand(Imports.MoveSelectionPx, 'editorMoveSelectionPx'),
  'Editor.openCompletion': lazyCommand(Imports.EditorCompletion, 'open'),
  'Editor.openCompletionFromType': lazyCommand(Imports.EditorCompletion, 'openFromType'),
  'Editor.paste': lazyCommand(Imports.Paste, 'editorPaste'),
  'Editor.pasteText': lazyCommand(Imports.PasteText, 'editorPasteText'),
  'Editor.save': lazyCommand(Imports.Save, 'editorSave'),
  'Editor.selectAll': lazyCommand(Imports.SelectAll, 'editorSelectAll'),
  'Editor.selectAllOccurrences': lazyCommand(Imports.SelectAllOccurrences, 'editorSelectAllOccurrences'),
  'Editor.selectCharacterLeft': lazyCommand(Imports.SelectCharacterLeft, 'editorSelectCharacterLeft'),
  'Editor.selectCharacterRight': lazyCommand(Imports.SelectCharacterRight, 'editorSelectCharacterRight'),
  'Editor.selectDown': lazyCommand(Imports.SelectDown, 'selectDown'),
  'Editor.selectInsideString': lazyCommand(Imports.SelectInsideString, 'editorSelectInsideString'),
  'Editor.selectLine': lazyCommand(Imports.SelectLine, 'editorSelectLine'),
  'Editor.selectNextOccurrence': lazyCommand(Imports.SelectNextOccurrence, 'editorSelectNextOccurrence'),
  'Editor.selectUp': lazyCommand(Imports.SelectUp, 'selectUp'),
  'Editor.selectWord': lazyCommand(Imports.SelectWord, 'editorSelectWord'),
  'Editor.selectWordLeft': lazyCommand(Imports.SelectWordLeft, 'editorSelectWordLeft'),
  'Editor.selectWordRight': lazyCommand(Imports.SelectWordRight, 'editorSelectWordRight'),
  'Editor.setDecorations': lazyCommand(Imports.SetDecorations, 'setDecorations'),
  'Editor.setDeltaY': lazyCommand(Imports.SetDeltaY, 'editorSetDeltaY'),
  'Editor.setLanguageId': lazyCommand(Imports.SetLanguageId, 'setLanguageId'),
  'Editor.sortLinesAscending': lazyCommand(Imports.SortLinesAscending, 'sortLinesAscending'),
  'Editor.tabCompletion': lazyCommand(Imports.TabCompletion, 'editorTabCompletion'),
  'Editor.toggleBlockComment': lazyCommand(Imports.ToggleBlockComment, 'editorToggleBlockComment'),
  'Editor.toggleComment': lazyCommand(Imports.ToggleComment, 'editorToggleComment'),
  'Editor.type': lazyCommand(Imports.Type, 'editorType'),
  'Editor.undo': lazyCommand(Imports.Undo, 'editorUndo'),
  'Editor.unindent': lazyCommand(Imports.UnIndent, 'selectUp'),
    // TODO command to set cursor position
}

export * from './ViewletEditorText.js'
