import { CommandNotFoundError } from '../CommandNotFoundError/CommandNotFoundError.js'
import * as ModuleId from '../ModuleId/ModuleId.js'

export const getModuleId = (commandId) => {
  switch (commandId) {
    case 'ElectronPowerSaveBlocker.start':
    case 'ElectronPowerSaveBlocker.stop':
      return ModuleId.ElectronPowerSaveBlocker
    case 'AttachDebugger.attachDebugger':
      return ModuleId.AttachDebugger
    case 'AutoUpdater.getAutoUpdateType':
    case 'AutoUpdater.getLatestVersion':
      return ModuleId.AutoUpdater
    case 'AutoUpdaterAppImage.downloadUpdate':
    case 'AutoUpdaterAppImage.installAndRestart':
      return ModuleId.AutoUpdaterAppImage
    case 'AutoUpdaterWindowsNsis.downloadUpdate':
    case 'AutoUpdaterWindowsNsis.installAndRestart':
      return ModuleId.AutoUpdaterWindowsNsis
    case 'BulkReplacement.applyBulkReplacement':
      return ModuleId.BulkReplacement
    case 'ChromeExtension.install':
    case 'ChromeExtension.uninstall':
      return ModuleId.ChromeExtension
    case 'ClipBoard.readFiles':
    case 'ClipBoard.writeFiles':
      return ModuleId.ClipBoard
    case 'Crash.crashMainProcess':
    case 'Crash.crashSharedProcess':
      return ModuleId.Crash
    case 'DesktopCapturer.getSources':
      return ModuleId.DesktopCapturer
    case 'Developer.allocateMemory':
    case 'Developer.crashSharedProcess':
    case 'Developer.createHeapSnapshot':
    case 'Developer.createProfile':
    case 'Developer.sharedProcessMemoryUsage':
    case 'Developer.sharedProcessStartupPerformance':
      return ModuleId.Developer
    case 'Download.download':
      return ModuleId.Download
    case 'ElectronApplicationMenu.handleClick':
    case 'ElectronApplicationMenu.setItems':
      return ModuleId.ElectronApplicationMenu
    case 'ElectronBrowserView.createBrowserView':
    case 'ElectronBrowserView.disposeBrowserView':
    case 'ElectronBrowserView.getAll':
      return ModuleId.ElectronBrowserView
    case 'ElectronClipBoard.writeText':
      return ModuleId.ElectronClipBoard
    case 'ElectronContentTracing.startRecording':
    case 'ElectronContentTracing.stopRecording':
      return ModuleId.ElectronContentTracing
    case 'ElectronContextMenu.openContextMenu':
      return ModuleId.ElectronContextMenu
    case 'ElectronDialog.showMessageBox':
    case 'ElectronDialog.showOpenDialog':
      return ModuleId.ElectronDialog
    case 'ElectronInitialize.electronInitialize':
      return ModuleId.ElectronInitialize
    case 'ElectronNetLog.startLogging':
    case 'ElectronNetLog.stopLogging':
      return ModuleId.ElectronNetLog
    case 'ElectronProcess.getChromeVersion':
    case 'ElectronProcess.getElectronVersion':
      return ModuleId.ElectronProcess
    case 'ElectronSafeStorage.decryptString':
    case 'ElectronSafeStorage.encryptString':
    case 'ElectronSafeStorage.isEncryptionAvailable':
      return ModuleId.ElectronSafeStorage
    case 'ElectronWindowAbout.open':
      return ModuleId.ElectronWindowAbout
    case 'ElectronWindowProcessExplorer.open':
      return ModuleId.ElectronWindowProcessExplorer
    case 'Exit.exit':
      return ModuleId.Exit
    case 'ElectronBrowserViewQuickPick.createBrowserViewQuickPick':
    case 'ElectronBrowserViewQuickPick.disposeBrowserViewQuickPick':
      return ModuleId.ElectronBrowserViewQuickPick
    case 'ExtensionHost.dispose':
    case 'ExtensionHost.enableExtension':
    case 'ExtensionHost.executeCommand':
    case 'ExtensionHost.executeTabCompletionProvider':
    case 'ExtensionHost.format':
    case 'ExtensionHost.getMemoryUsage':
    case 'ExtensionHost.getSourceControlBadgeCount':
    case 'ExtensionHost.getStatusBarItems':
    case 'ExtensionHost.registerChangeListener':
    case 'ExtensionHost.setWorkspacePath':
    case 'ExtensionHost.sourceControlGetChangedFiles':
    case 'ExtensionHost.start':
    case 'ExtensionHostBraceCompletion.executeBraceCompletionProvider':
    case 'ExtensionHostClosingTag.execute':
    case 'ExtensionHostClosingTag.executeClosingTagProvider':
    case 'ExtensionHostClosingTag.executeTypeDefinitionProvider':
    case 'ExtensionHostCompletion.execute':
    case 'ExtensionHostDefinition.executeDefinitionProvider':
    case 'ExtensionHostDiagnostic.execute':
    case 'ExtensionHostFileSystem.getPathSeparator':
    case 'ExtensionHostFileSystem.readDirWithFileTypes':
    case 'ExtensionHostFileSystem.readFile':
    case 'ExtensionHostFileSystem.remove':
    case 'ExtensionHostFileSystem.rename':
    case 'ExtensionHostFileSystem.writeFile':
    case 'ExtensionHostHover.execute':
    case 'ExtensionHostImplementation.executeImplementationProvider':
    case 'ExtensionHostKeyBindings.getKeyBindings':
    case 'ExtensionHostLanguages.getLanguages':
    case 'ExtensionHostManagement.activateAll':
    case 'ExtensionHostManagement.enableExtensions':
    case 'ExtensionHostOutput.getOutputChannels':
    case 'ExtensionHostQuickPick.handleQuickPickResult':
    case 'ExtensionHostReferences.executeReferenceProvider':
    case 'EXtensionHostRename.executePrepareRename':
    case 'ExtensionHostRename.executeRename':
    case 'ExtensionHostSemanticTokens.executeSemanticTokenProvider':
    case 'ExtensionHostSourceControl.acceptInput':
    case 'ExtensionHostTextDocument.setLanguageId':
    case 'ExtensionHostTextDocument.syncFull':
    case 'ExtensionHostTextDocument.syncIncremental':
    case 'ExtensionHostTextDocument.syncInitial':
    case 'ExtensionHostTextDocument':
    case 'ExtensionHostWorkspace.setWorkspacePath':
      return ModuleId.ExtensionHost
    case 'ExtensionHost.getColorThemeJson':
    case 'ExtensionHost.getColorThemeNames':
    case 'ExtensionHost.getColorThemes':
    case 'ExtensionHost.getIconTheme':
    case 'ExtensionHost.getIconThemeJson':
    case 'ExtensionHost.getLanguageConfiguration':
    case 'ExtensionHost.getLanguages':
    case 'ExtensionHost.watchColorTheme':
    case 'ExtensionManagement.disable':
    case 'ExtensionManagement.enable':
    case 'ExtensionManagement.getAllExtensions':
    case 'ExtensionManagement.getExtensions':
    case 'ExtensionManagement.install':
    case 'ExtensionManagement.uninstall':
      return ModuleId.ExtensionManagement
    case 'ElectronBrowserViewFunctions.resizeBrowserView':
    case 'ElectronBrowserViewFunctions.setIframeSrc':
    case 'ElectronBrowserViewFunctions.focus':
    case 'ElectronBrowserViewFunctions.openDevtools':
    case 'ElectronBrowserViewFunctions.reload':
    case 'ElectronBrowserViewFunctions.forward':
    case 'ElectronBrowserViewFunctions.backward':
    case 'ElectronBrowserViewFunctions.cancelNavigation':
    case 'ElectronBrowserViewFunctions.hide':
    case 'ElectronBrowserViewFunctions.inspectElement':
    case 'ElectronBrowserViewFunctions.copyImageAt':
    case 'ElectronBrowserViewFunctions.setFallthroughKeyBindings':
    case 'ElectronBrowserViewFunctions.getStats':
      return ModuleId.ElectronBrowserViewFunctions
    case 'ElectronWebContentsViewFunctions.resizeBrowserView':
    case 'ElectronWebContentsViewFunctions.setIframeSrc':
    case 'ElectronWebContentsViewFunctions.focus':
    case 'ElectronWebContentsViewFunctions.openDevtools':
    case 'ElectronWebContentsViewFunctions.reload':
    case 'ElectronWebContentsViewFunctions.forward':
    case 'ElectronWebContentsViewFunctions.backward':
    case 'ElectronWebContentsViewFunctions.cancelNavigation':
    case 'ElectronWebContentsViewFunctions.hide':
    case 'ElectronWebContentsViewFunctions.inspectElement':
    case 'ElectronWebContentsViewFunctions.copyImageAt':
    case 'ElectronWebContentsViewFunctions.setFallthroughKeyBindings':
    case 'ElectronWebContentsViewFunctions.getStats':
      return ModuleId.ElectronWebContentsViewFunctions
    case 'FileSystem.chmod':
    case 'FileSystem.copy':
    case 'FileSystem.createFile':
    case 'FileSystem.createFolder':
    case 'FileSystem.ensureFile':
    case 'FileSystem.getPathSeparator':
    case 'FileSystem.mkdir':
    case 'FileSystem.readDirWithFileTypes':
    case 'FileSystem.readFile':
    case 'FileSystem.remove':
    case 'FileSystem.rename':
    case 'FileSystem.writeFile':
      return ModuleId.FileSystem
    case 'ElectronBrowserViewSuggestions.createBrowserView':
    case 'ElectronBrowserViewSuggestions.disposeBrowserView':
    case 'ElectronBrowserViewSuggestions.setSuggestions':
      return ModuleId.ElectronBrowserViewSuggestions
    case 'GetTerminalSpawnOptions.getTerminalSpawnOptions':
      return ModuleId.GetTerminalSpawnOptions
    case 'GitLsFiles.gitLsFiles':
    case 'GitLsFiles.gitLsFilesHash':
    case 'GitLsFiles.resolveGit':
      return ModuleId.GitLsFiles
    case 'HandleCliArgs.handleCliArgs':
      return ModuleId.HandleCliArgs
    case 'HandleElectronMessagePort.handleElectronMessagePort':
      return ModuleId.HandleElectronMessagePort
    case 'HandleNodeMessagePort.handleNodeMessagePort':
      return ModuleId.HandleNodeMessagePort
    case 'HandleWebSocket.handleWebSocket':
      return ModuleId.HandleWebSocket
    case 'IncrementalTextSearch.start':
      return ModuleId.IncrementalTextSearch
    case 'InstallExtension.installExtension':
      return ModuleId.InstallExtension
    case 'IsAutoUpdateSupported.isAutoUpdateSupported':
      return ModuleId.IsAutoUpdateSupported
    case 'ListProcessesWithMemoryUsage.listProcessesWithMemoryUsage':
      return ModuleId.ListProcessesWithMemoryUsage
    case 'OpenExternal.openExternal':
    case 'OpenExternal.showItemInFolder':
      return ModuleId.OpenExternal
    case 'Native.openFolder':
    case 'OpenNativeFolder.openFolder':
      return ModuleId.OpenNativeFolder
    case 'Os.getTmpDir':
      return ModuleId.Os
    case 'OutputChannel.close':
    case 'OutputChannel.open':
      return ModuleId.OutputChannel
    case 'PassthroughElectronMessagePort.passThroughElectronMessagePort':
      return ModuleId.PassThroughElectronMessagePort
    case 'Performance.getNodeStartupTiming':
      return ModuleId.Performance
    case 'GetWindowId.getWindowId':
      return ModuleId.GetWindowId
    case 'Platform.getAppDir':
    case 'Platform.getApplicationName':
    case 'Platform.getBuiltinExtensionsPath':
    case 'Platform.getCachedExtensionsPath':
    case 'Platform.getCacheDir':
    case 'Platform.getCommit':
    case 'Platform.getConfigDir':
    case 'Platform.getDataDir':
    case 'Platform.getDate':
    case 'Platform.getDisabledExtensionsPath':
    case 'Platform.getDownloadDir':
    case 'Platform.getExtensionsPath':
    case 'Platform.getHomeDir':
    case 'Platform.getLogsDir':
    case 'Platform.getMarketplaceUrl':
    case 'Platform.getProductNameLong':
    case 'Platform.getRecentlyOpenedPath':
    case 'Platform.getTestPath':
    case 'Platform.getUserKeyBindingsPath':
    case 'Platform.getUserSettingsPath':
    case 'Platform.getVersion':
    case 'Platform.setEnvironmentVariables':
      return ModuleId.Platform
    case 'ElectronDeveloper.getPerformanceEntries':
      return ModuleId.ElectronDeveloper
    case 'Preferences.getAll':
      return ModuleId.Preferences
    case 'Process.getArch':
    case 'Process.getNodeVersion':
    case 'Process.getPid':
    case 'Process.getV8Version':
    case 'Process.kill':
      return ModuleId.Process
    case 'ProcessId.getMainProcessId':
    case 'ProcessId.getSharedProcessId':
      return ModuleId.ProcessId
    case 'RebuildNodePty.rebuildNodePty':
      return ModuleId.RebuildNodePty
    case 'RecentlyOpened.addPath':
      return ModuleId.RecentlyOpened
    case 'TextSearch.search':
      return ModuleId.Search
    case 'SearchFile.searchFile':
      return ModuleId.SearchFile
    case 'Terminal.create':
    case 'Terminal.dispose':
    case 'Terminal.resize':
    case 'Terminal.write':
      return ModuleId.Terminal
    case 4820:
      return ModuleId.TextDocument
    case 'WebSocketServer.handleUpgrade':
      return ModuleId.WebSocketServer
    case 'ElectronWindow.close':
    case 'ElectronWindow.focus':
    case 'ElectronWindow.getZoom':
    case 'ElectronWindow.maximize':
    case 'ElectronWindow.minimize':
    case 'ElectronWindow.openNew':
    case 'ElectronWindow.reload':
    case 'ElectronWindow.toggleDevtools':
    case 'ElectronWindow.unmaximize':
    case 'ElectronWindow.zoomIn':
    case 'ElectronWindow.zoomOut':
    case 'ElectronWindow.zoomReset':
      return ModuleId.Window
    case 'Workspace.getHomeDir':
    case 'Workspace.resolveRoot':
      return ModuleId.Workspace
    case 'ElectronNet.getJson':
      return ModuleId.ElectronNet
    case 'Screen.getWidth':
    case 'Screen.getHeight':
    case 'Screen.getBounds':
      return ModuleId.Screen
    case 'HandleElectronReady.handleElectronReady':
      return ModuleId.HandleElectronReady
    case 'HandleWindowAllClosed.handleWindowAllClosed':
      return ModuleId.HandleWindowAllClosed
    case 'HandleMessagePortForTerminalProcess.handleMessagePortForTerminalProcess':
      return ModuleId.HandleMessagePortForTerminalProcess
    case 'TemporaryMessagePort.handlePort':
      return ModuleId.TemporaryMessagePort
    case 'GetElectronFileResponse.getElectronFileResponse':
      return ModuleId.GetElectronFileResponse
    case 'HandleRemoteRequest.handleRemoteRequest':
      return ModuleId.HandleRemoteRequest
    case 'HandleMessagePortForExtensionHostHelperProcess.handleMessagePortForExtensionHostHelperProcess':
      return ModuleId.HandleMessagePortForExtensionHostHelperProcess
    case 'ElectronWebContents.dispose':
    case 'ElectronWebContents.handleKeyBinding':
    case 'ElectronWebContents.handleWindowOpen':
    case 'ElectronWebContents.handleWillNavigate':
    case 'ElectronWebContents.handleDidNavigate':
    case 'ElectronWebContents.handleContextMenu':
    case 'ElectronWebContents.handlePageTitleUpdated':
      return ModuleId.ElectronWebContents
    case 'ElectronWebContentsView.createWebContentsView':
    case 'ElectronWebContentsView.disposeWebContentsView':
      return ModuleId.ElectronWebContentsView
    case 'HandleRequestTest.handleRequestTest':
      return ModuleId.HandleRequestTest
    case 'ContentSecurityPolicy.set':
      return ModuleId.ContentSecurityPolicy
    case 'HandleMessagePortForEmbedsProcess.handleMessagePortForEmbedsProcess':
      return ModuleId.HandleMessagePortForEmbedsProcess
    case 'HandleMessagePortForProcessExplorer.handleMessagePortForProcessExplorer':
      return ModuleId.HandleMessagePortForProcessExplorer
    default:
      throw new CommandNotFoundError(commandId)
  }
}
