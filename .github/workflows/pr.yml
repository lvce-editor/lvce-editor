name: PR

on:
  pull_request:
    branches:
      - main

jobs:
  pr:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/main:refs/remotes/origin/main
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Compute node modules cache key
        id: nodeModulesCacheKey
        run: echo "value=$(node build/src/parts/ComputeNodeModulesCacheKey/ComputeNodeModulesCacheKey.js)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: npm-cache
        if: matrix.os != 'windows-2022' # workaround for https://github.com/actions/cache/issues/728
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-cacheNodeModules-${{ steps.nodeModulesCacheKey.outputs.value }}
      - uses: actions/cache@v3
        id: electron-rebuild-cache
        with:
          path: '~/.electron-gyp'
          key: ${{ runner.os }}-cacheElectronRebuild-${{ steps.nodeModulesCacheKey.outputs.value }}
      - uses: actions/cache@v3
        id: build-cache
        with:
          path: 'build/.tmp/cachedDependencies'
          key: ${{ runner.os }}-build-cache-${{ steps.nodeModulesCacheKey.outputs.value }}
      - name: npm ci
        run: npm ci
        if: steps.npm-cache.outputs.cache-hit != 'true'
        env:
          DOWNLOAD_BUILTIN_EXTENSIONS: 0
      - name: Compute builtin extensions cache key
        id: builtinExtensionsCacheKey
        run: echo "value=$(node build/src/parts/ComputeBuiltinExtensionsCacheKey/ComputeBuiltinExtensionsCacheKey.js)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: builtin-extensions-cache
        with:
          path: extensions
          key: builtinExtensions-${{ steps.builtinExtensionsCacheKey.outputs.value }}
      - name: Download Builtin Extensions
        run: node build/src/parts/DownloadBuiltinExtensions/DownloadBuiltinExtensions.js
        if: steps.builtin-extensions-cache.outputs.cache-hit != 'true'
      - run: npx lerna run test --since origin/main
      - name: install playwright dependencies
        working-directory: ./packages/e2e
        run: npx playwright install chromium
        if: steps.npm-cache.outputs.cache-hit != 'true'
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0
      - name: Run headless test
        working-directory: ./packages/e2e
        run: npm run e2e:headless
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0
      - name: install playwright dependencies (extension host worker tests)
        working-directory: ./packages/extension-host-worker-tests
        run: npx playwright install chromium
        if: steps.npm-cache.outputs.cache-hit != 'true'
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0
      - name: Run extension host worker tests
        working-directory: ./packages/extension-host-worker-tests
        run: npm run e2e:headless
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0
      - name: Build static site
        if: matrix.os == 'ubuntu-22.04'
        run: node build/bin/build.js --target=static --ignore-icon-theme
        env:
          PATH_PREFIX: /lvce-editor
      - name: Build server
        if: matrix.os == 'ubuntu-22.04'
        run: node build/bin/build.js --target=server
      - name: Build Electron App (deb)
        if: matrix.os == 'ubuntu-22.04'
        run: node build/bin/build.js --target=electron-deb
      - name: Cache Electron Builder Dependencies (Windows)
        uses: actions/cache@v3
        id: electron-builder-cache-windows
        if: matrix.os == 'windows-2022'
        with:
          path: '~\AppData\Local\electron-builder'
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('build/package-lock.json') }}
      - name: Build Electron App (exe)
        if: matrix.os == 'windows-2022'
        run: node build/bin/build.js --target=electron-builder-windows-exe
