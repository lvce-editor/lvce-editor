# Based on https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml by BurntSushi (License MIT)

name: release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      rg_version: ${{ env.RG_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RG_VERSION == ''
        run: |
          echo "RG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RG_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RG_VERSION }}
          release_name: ${{ env.RG_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        os: [windows-2022, macos-14, ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'
      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Compute node modules cache key
        id: nodeModulesCacheKey
        run: echo "value=$(node packages/build/src/parts/ComputeNodeModulesCacheKey/ComputeNodeModulesCacheKey.js)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: actions/cache@v4
        id: npm-cache
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-cacheNodeModules-${{ steps.nodeModulesCacheKey.outputs.value }}
          restore-keys: ${{ runner.os }}-cacheNodeModules-
      - uses: actions/cache@v4
        id: electron-builder-cache
        with:
          path: '~/.cache/electron-builder'
          key: ${{ runner.os }}-cacheElectronBuilder-${{ steps.nodeModulesCacheKey.outputs.value }}
      - uses: actions/cache@v4
        id: build-cache
        with:
          path: 'packages/build/.tmp/cachedDependencies'
          key: ${{ runner.os }}-build-cache-${{ steps.nodeModulesCacheKey.outputs.value }}
      - name: npm ci
        run: npm ci
        if: steps.npm-cache.outputs.cache-hit != 'true'
        env:
          DOWNLOAD_BUILTIN_EXTENSIONS: 0
      - name: Compute builtin extensions cache key
        id: builtinExtensionsCacheKey
        run: echo "value=$(node packages/build/src/parts/ComputeBuiltinExtensionsCacheKey/ComputeBuiltinExtensionsCacheKey.js)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: actions/cache@v4
        id: builtin-extensions-cache
        with:
          path: extensions
          key: builtinExtensions-${{ steps.builtinExtensionsCacheKey.outputs.value }}
      - name: Download Builtin Extensions
        run: node packages/build/src/parts/DownloadBuiltinExtensions/DownloadBuiltinExtensions.js
        if: steps.builtin-extensions-cache.outputs.cache-hit != 'true'
      - run: npm run type-check
      - run: npm test
      - run: node packages/build/bin/build.js --target=server
      - name: Cache Electron Builder Dependencies (Windows)
        uses: actions/cache@v4
        id: electron-builder-cache-windows
        if: matrix.os == 'windows-2022'
        with:
          path: '~\AppData\Local\electron-builder'
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('packages/build/package-lock.json') }}
      - name: Build Electron App (deb, x64)
        if: matrix.os == 'ubuntu-22.04'
        run: node packages/build/bin/build.js --product=lvce --target=electron-deb
        env:
          HIGHEST_COMPRESSION: 1
      - name: Rename Electron App (deb, x64)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash
        run: |
          staging="lvce-${{ needs.create-release.outputs.rg_version }}_amd64.deb"
          mv "packages/build/.tmp/releases/lvce-amd64.deb" "$staging"
          echo "ASSET_DEB_X64=$staging" >> $GITHUB_ENV
      - name: Release Electron App (deb, x64)
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.os == 'ubuntu-22.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_DEB_X64 }}
          asset_name: ${{ env.ASSET_DEB_X64 }}
          asset_content_type: application/octet-stream
      - name: Build Electron App (deb, arm64)
        if: matrix.os == 'ubuntu-22.04'
        run: node packages/build/bin/build.js --product=lvce --target=electron-deb --arch=arm64
        env:
          HIGHEST_COMPRESSION: 1
      - name: Rename Electron App (deb, arm64)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash
        run: |
          staging="lvce-${{ needs.create-release.outputs.rg_version }}_arm64.deb"
          mv "packages/build/.tmp/releases/lvce-arm64.deb" "$staging"
          echo "ASSET_DEB_ARM64=$staging" >> $GITHUB_ENV
      - name: Release Electron App (deb, arm64)
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.os == 'ubuntu-22.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_DEB_ARM64 }}
          asset_name: ${{ env.ASSET_DEB_ARM64 }}
          asset_content_type: application/octet-stream
      - name: Build Electron App (deb, armhf)
        if: matrix.os == 'ubuntu-22.04'
        run: node packages/build/bin/build.js --product=lvce --target=electron-deb --arch=armhf
        env:
          HIGHEST_COMPRESSION: 1
      - name: Rename Electron App (deb, armhf)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash
        run: |
          staging="lvce-${{ needs.create-release.outputs.rg_version }}_armhf.deb"
          mv "packages/build/.tmp/releases/lvce-armhf.deb" "$staging"
          echo "ASSET_DEB_ARMHF=$staging" >> $GITHUB_ENV
      - name: Release Electron App (deb, armhf)
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.os == 'ubuntu-22.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_DEB_ARMHF }}
          asset_name: ${{ env.ASSET_DEB_ARMHF }}
          asset_content_type: application/octet-stream
      - name: Build Electron App (snap, x64)
        if: matrix.os == 'ubuntu-22.04'
        run: node packages/build/bin/build.js --product=lvce --target=electron-builder-snap
      - name: Rename Electron App (snap, x64)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash
        run: |
          staging="lvce-${{ needs.create-release.outputs.rg_version }}_amd64.snap"
          mv "packages/build/.tmp/releases/lvce-editor.snap" "$staging"
          echo "ASSET_SNAP_X64=$staging" >> $GITHUB_ENV
      - name: Release Electron App (snap, x64)
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.os == 'ubuntu-22.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_SNAP_X64 }}
          asset_name: ${{ env.ASSET_SNAP_X64 }}
          asset_content_type: application/octet-stream
      - name: Build Electron App (Macos dmg, x64)
        if: matrix.os == 'macos-14'
        run: node packages/build/bin/build.js --product=lvce --target=electron-builder-mac --arch=arm64
      - name: Rename Electron App (Macos dmg, x64)
        if: matrix.os == 'macos-14'
        shell: bash
        run: |
          staging="lvce-${{ needs.create-release.outputs.rg_version }}_amd64.dmg"
          mv "packages/build/.tmp/releases/lvce-amd64.dmg" "$staging"
          echo "ASSET_DMG_X64=$staging" >> $GITHUB_ENV
      - name: Release Electron App (Macos dmg, x64)
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.os == 'macos-14'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_DMG_X64 }}
          asset_name: ${{ env.ASSET_DMG_X64 }}
          asset_content_type: application/octet-stream
      - name: Build Electron App (Macos dmg, arm64)
        if: matrix.os == 'macos-14'
        run: node packages/build/bin/build.js --product=lvce --target=electron-builder-mac --arch=arm64
      - name: Rename Electron App (Macos dmg, arm64)
        if: matrix.os == 'macos-14'
        shell: bash
        run: |
          staging="lvce-${{ needs.create-release.outputs.rg_version }}_arm64.dmg"
          mv "packages/build/.tmp/releases/lvce-arm64.dmg" "$staging"
          echo "ASSET_DMG_ARM64=$staging" >> $GITHUB_ENV
      - name: Release Electron App (Macos dmg, x64)
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.os == 'macos-14'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_DMG_ARM64 }}
          asset_name: ${{ env.ASSET_DMG_ARM64 }}
          asset_content_type: application/octet-stream
      - name: Build Electron App (exe, x64)
        if: matrix.os == 'windows-2022'
        run: node packages/build/bin/build.js --product=lvce --target=electron-builder-windows-exe --arch=x64
        env:
          HIGHEST_COMPRESSION: 1
      - name: Rename Electron App (exe, x64)
        if: matrix.os == 'windows-2022'
        shell: bash
        run: |
          staging="Lvce-Setup-${{ needs.create-release.outputs.rg_version }}-x64.exe"
          mv "packages/build/.tmp/releases/Lvce Editor-x64.exe" "$staging"
          echo "ASSET_WINDOWS_EXE_X64=$staging" >> $GITHUB_ENV
      - name: Release Electron App (exe, x64)
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.os == 'windows-2022'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_WINDOWS_EXE_X64 }}
          asset_name: ${{ env.ASSET_WINDOWS_EXE_X64 }}
          asset_content_type: application/octet-stream
      - name: Build Electron App (exe, arm64)
        if: matrix.os == 'windows-2022'
        run: node packages/build/bin/build.js --product=lvce --target=electron-builder-windows-exe --arch=arm64
        env:
          HIGHEST_COMPRESSION: 1
      - name: Rename Electron App (exe, arm64)
        if: matrix.os == 'windows-2022'
        shell: bash
        run: |
          staging="Lvce-Setup-${{ needs.create-release.outputs.rg_version }}-arm64.exe"
          mv "packages/build/.tmp/releases/Lvce Editor-arm64.exe" "$staging"
          echo "ASSET_WINDOWS_EXE_ARM64=$staging" >> $GITHUB_ENV
      - name: Release Electron App (exe, arm64)
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.os == 'windows-2022'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_WINDOWS_EXE_ARM64 }}
          asset_name: ${{ env.ASSET_WINDOWS_EXE_ARM64 }}
          asset_content_type: application/octet-stream
      - name: Build Electron App (AppImage)
        if: matrix.os == 'ubuntu-22.04'
        run: node packages/build/bin/build.js --product=lvce --target=electron-builder-app-image
      - name: Rename Electron App (AppImage)
        if: matrix.os == 'ubuntu-22.04'
        shell: bash
        run: |
          staging="Lvce-${{ needs.create-release.outputs.rg_version }}.AppImage"
          mv "packages/build/.tmp/releases/lvce.AppImage" "$staging"
          echo "ASSET_APP_IMAGE_X64=$staging" >> $GITHUB_ENV
      - name: Release Electron App (AppImage)
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.os == 'ubuntu-22.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_APP_IMAGE_X64 }}
          asset_name: ${{ env.ASSET_APP_IMAGE_X64 }}
          asset_content_type: application/octet-stream
      - run: npm publish --access public
        if: matrix.os == 'ubuntu-22.04'
        working-directory: ./packages/build/.tmp/server/extension-host-helper-process
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - run: npm publish --access public
        if: matrix.os == 'ubuntu-22.04'
        working-directory: ./packages/build/.tmp/server/jest-environment
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - run: npm publish --access public
        if: matrix.os == 'ubuntu-22.04'
        working-directory: ./packages/build/.tmp/server/server
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - run: npm publish --access public
        if: matrix.os == 'ubuntu-22.04'
        working-directory: ./packages/build/.tmp/server/shared-process
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - run: npm publish --access public
        if: matrix.os == 'ubuntu-22.04'
        working-directory: ./packages/build/.tmp/server/typescript-compile-process
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: Clean up
        run: rm -rf packages/build/.tmp
        shell: bash

      # - name: Build archive
      #   shell: bash
      #   run: |
      #     staging="language-features-typescript-${{ needs.create-release.outputs.rg_version }}"
      #     mv "extension.tar.br" "$staging.tar.br"
      #     echo "ASSET=$staging.tar.br" >> $GITHUB_ENV

      # - name: Upload release archive
      #   uses: actions/upload-release-asset@v1.0.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.create-release.outputs.upload_url }}
      #     asset_path: ${{ env.ASSET }}
      #     asset_name: ${{ env.ASSET }}
      #     asset_content_type: application/octet-stream
